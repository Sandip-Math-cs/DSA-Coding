//=========================================problem description================================================//
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
/*===========================================--------solution--------====================================================*/
we can find left_max and right_max for each entry, then we can find how much water stay above each entry->total water

-------------------------------------------------------------------------------O(n) time and O(n) space-------------------------------------
class Solution {
public:
    int trap(vector<int>& height) {      
       int n=height.size();
        int lm[n],rm[n],sum=0;
        lm[0]=height[0];
        rm[n-1]=height[n-1];
        for(int i=1;i<n;i++){
            lm[i]=max(lm[i-1],height[i]);
            rm[n-i-1]=max(height[n-i-1],rm[n-i]);
        }
        for(int i=0;i<n;i++){
            sum+=min(lm[i],rm[i])-height[i];
        }
        return sum;
    }
};
-------------------------------------------------------------Two pointer approach------------O(n) time and O(1) space-------------------------------------------------
class Solution {
public:
    int trap(vector<int>& height) {
        int sum=0,lm=height[0],rm=height[height.size()-1];
        int lp=0,rp=height.size()-1;
        while(lp<rp){
            if(lm<rm){
                sum+=lm-height[lp];
                lp++;
                lm=max(lm,height[lp]);
            }
            else{
                sum+=rm-height[rp];
                rp--;
                rm=max(rm,height[rp]);
            }
        }
        return sum;
    }
};
