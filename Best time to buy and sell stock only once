//===============================================problem description==========================================================='=//
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
/========================================================solution======================================================================/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
    //---------------------------------------------------------Brute-force approach--------------O(n^2) time------------------------------------------------//
        int profit=0;-
        for(int i=0;i<prices.size();i++) {
            for(int j=i+1;j<prices.size();j++) {
                profit=max(profit, prices[j]-prices[i]);
            }
        }
        return profit;   
   //-----------------------------------------------Using right poniter approach using extra spaces--------O(n) time and O(n) space----------------------------//
        int rm[prices.size()];
        int profit=0;
        rm[prices.size()-1]=prices[prices.size()-1];
        for(int i=prices.size()-2;i>0;i--) {
            rm[i]=max(rm[i+1],prices[i]);
        }
        for(int i=0;i<prices.size();i++) {
            profit=max(profit,rm[i]-prices[i]);
        }
        return profit;   
  //-------------------------------------------------------------------no extra space, O(n) time, right pointer approach---------------------------------------//
        int rm=prices[prices.size()-1];
        int profit=rm-prices[prices.size()-1];
        for(int i=prices.size()-2;i>=0;i--) {
            rm=max(rm,prices[i]);
            profit=max(profit, rm-prices[i]);
        }
        return profit;   
  //----------------------------------------------------------------------Left pointer approach, O(n) time and O(1) space---------------------------------------//
        int profit=0;
        int lp=prices[0];
        for(int i=1;i<prices.size();i++) {
            lp=min(lp,prices[i]);
            profit=max(profit, prices[i]-lp);
        }
        return profit;   
    }
};
