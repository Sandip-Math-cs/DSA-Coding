//==================================problem description========================//
Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.
Example 1:
Input: nums = [1,1,1], k = 2
Output: 2
Example 2:
Input: nums = [1,2,3], k = 3
Output: 2
/*============================================solution==============================*/
Here we can use pre-index sum, but to store index sum we can't use unordered_set, 
we have to use unordered_map, bacause more than one pre-index sum can be same.
/*---------------------------------------------------------------------------------------*/

 class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
//------------------------------------------Brute-force approach  O(n^2)----------------------- 
/*      int count=0;
        for(int i=0;i<nums.size();i++) {
            int sum=0;
            for(int j=i;j<nums.size();j++) {
                sum+=nums[j];
                if(sum==k)
                    count++;
            }
        }
        return count;  */
//------------------------------------------------using map  O(n)------------------------
        unordered_map<int, int> m;
        int sum=0,count=0;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
            if(sum==k)
                count++;
            if(m.find(sum-k)!=m.end())
                count+=m[sum-k];
            m[sum]++;
        }
        return count;
    }
};
